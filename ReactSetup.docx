1. WebPack Configuration
It is an incredibly powerful tool which ingests react components into javascript that almost every browser understands.

Lets install webpack & webpack-cli by running this - 
npm i webpack webpack-cli --save-dev

Next up add the webpackcommand inside package.json:

"scripts": {
  "build": "webpack --mode production"
}

2. Babel Configuration
React components are mostly written in JavaScript ES6. ES6 is a nice improvement over the language but older browsers 
cannot understand the new syntax. Take the class keyword for example. Stateful React components are declared as 
classes (I guess it will be no longer the case sooner or later). So for getting ES6 to work in older browser we need 
some kind of transformation.

And that transformation is called transpiling. Webpack doesn’t know how to transform ES6 JavaScript to ES5 but it has 
this concept of loaders: think of them as of transformers. A webpack loader takes something as the input and produces 
something else as the output.

babel-loader is the Webpack loader responsible for taking in the ES6 code and making it understandable by the browser
 of choice.

Obsviusly babel-loader makes use of Babel. And Babel must be configured to use a bunch of presets:

1. babel preset env for compiling Javascript ES6 code down to ES5 
2. babel preset react for compiling JSX and other stuff down to Javascript

npm i @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev

3. Create Webpack.config.json file

module.exports = {
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader"
        }
      }
    ]
  }
};

For every file with a js or jsx extension Webpack pipes the code through babel-loader for transforming ES6 down to ES5.

4. Create React components

5. Setup HTML Webpack Plugin
To display our React form we must tell Webpack to produce an HTML page. The resulting bundle will be placed inside a script tag.

Webpacks needs two additional components for processing HTML: html-webpack-plugin and html-loader.

npm i html-webpack-plugin html-loader --save-dev

6. Setup WebPack Development Server

npm i webpack-dev-server --save-dev

7. Adding Redux in your  React Project

 7.1 Create Store
   The Redux store is fundamental: the state of the whole application lives inside the store. create store code -

   import { createStore } from "redux";
   import rootReducer from "../reducers/index";
   const store = createStore(rootReducer);
   export default store;

   createStore takes a reducer as the first argument, You may also pass an initial state to createStore which is useful
    for server side rendering but for now we’re not interested in that.

   The most important concept here is that the state in redux comes from reducers. Let’s make it clear: reducers 
   produce the state of your application.

   7.2 Reducer
    A reducer is just a JavaScript function. A reducer takes two parameters: the current state and an 
    action. This is why the reducer must be pure. A pure function is one that returns the exact same 
    output for the given input.

    You will use connect with two or three arguments depending on the use case. The fundamental things to know are:

the mapStateToProps function
the mapDispatchToProps function
mapStateToProps connects a part of the Redux state to the props of a React component. By doing so a 
connected React component will have access to the exact part of the store it needs.

mapDispatchToProps connects Redux actions to React props. This way a connected React component will be 
able to dispatch actions.

7.3 Provider 
Connecting Redux with React we’re going to use Provider.

Provider is an high order component coming from react-redux. Provider wraps up your React application and makes it aware of the entire Redux’s store.

